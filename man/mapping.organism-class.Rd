% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa-all-classes.R
\docType{class}
\name{mapping.organism-class}
\alias{mapping.organism-class}
\title{Mapping organism input}
\description{
Mapping organism input
}
\section{Slots}{

\describe{
\item{\code{organism}}{A character with the scientific Latin name of the organism}

\item{\code{target_class}}{A character indicating the name of the target class for
this organism}

\item{\code{base_class}}{A character indicating the name of the base class for this
organism}

\item{\code{celltype_mapping}}{A list of vectors with the cell type correspondence
between the mapping organism and the reference organism for which asmbPLSDA
has been trained. Note that the name of each element of the list should be
exactly the cell type used in \link{superpathway.gene.sets-class}, each
vector contains the values of \code{slot(SeuratObject, meta.data$class)} that are
equivalent to its respective \link{superpathway.gene.sets-class} cell type.
If no mapping exists for a given cell type its vector should void. If you
are assessing multiple \link{superpathway.gene.sets-class} objects, you
should include the mapping of all cell types used in these objects.}

\item{\code{counts}}{A Seurat object with the scRNA-seq counts. This object should
contain variables in \code{slot(SeuratObject, meta.data)} slot; \code{class}
indicating the class the sample belongs to; \code{celltype_cluster} indicating
the cell type cluster (either character or numeric)}
}}

\examples{
organism <- "Mus musculus"
target_class <- "g1"
base_class <- "g2"
counts <- SeuratObject::pbmc_small # Toy dataset
# Rename "group" variable to "class"
colnames(slot(counts, "meta.data"))[6] <- "class"
# Example existing mapping for T-cell but no mapping for Dendritic Cell
celltype_mapping <- list("T-cell" = c("dÎ³dT", "T"),
"Dendritic Cell" = c())
# Rename "RNA_snn.res.1" variable to "celltype_cluster"
colnames(slot(counts, "meta.data"))[7] <- "celltype_cluster"
# Create object
my_mapping_organism <- new("mapping.organism",
                           organism = organism,
                           target_class = target_class,
                           base_class = base_class,
                           celltype_mapping = celltype_mapping,
                           counts = counts)
print(my_mapping_organism)
}
