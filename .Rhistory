"Y_pred_num", "Y_weight"))
# Check if Delta is a matrix and has expected dimensions
expect_is(scores_output$Delta, "matrix")
expect_equal(nrow(scores_output$Delta),
length(object@superpathway_input@superpathway_info@celltypes))
# Check Y_pred_num is a numeric vector
expect_type(scores_output$Y_pred_num, "double")
# Check if gamma is a matrix with expected dimensions
expect_class(scores_output$gamma, "matrix")
expect_equal(nrow(scores_output$gamma),
length(object@superpathway_input@superpathway_info@celltypes))
})
test_that("derive_scores computes scores correctly", {
data("example_superpathway_fit_model", package = "singIST")
object <- example_superpathway_fit_model
data <- biological_link_function(
example_mapping_organism, example_superpathway_fit_model,
exact = FALSE)$singIST_samples
sample <- 2
# Call the function
scores_output <- derive_scores(object, data, sample)
# Check if the output is a list
expect_true(is.list(scores_output))
# Check the structure of the output
expect_named(scores_output, c("Delta", "delta", "gamma", "Gamma",
"Y_pred_num", "Y_weight"))
# Check if Delta is a matrix and has expected dimensions
expect_class(scores_output$Delta, "matrix")
expect_equal(nrow(scores_output$Delta),
length(object@superpathway_input@superpathway_info@celltypes))
# Check Y_pred_num is a numeric vector
expect_type(scores_output$Y_pred_num, "double")
# Check if gamma is a matrix with expected dimensions
expect_class(scores_output$gamma, "matrix")
expect_equal(nrow(scores_output$gamma),
length(object@superpathway_input@superpathway_info@celltypes))
})
test_that("derive_scores handles empty input correctly", {
# Test with an empty matrix
empty_data <- matrix(ncol = 0, nrow = 0)
expect_error(derive_scores(example_superpathway_fit_model, empty_data, 1))
})
usethis::use_test("derive_contributions")
data("example_superpathway_fit_model", package = "singIST")
model_object <- example_superpathway_fit_model
data <- biological_link_function(
example_mapping_organism,example_superpathway_fit_model,
exact = FALSE)$singIST_samples
# Call the function
contributions_output <- derive_contributions(model_object, data)
# Check if the output is a list
expect_true(is.list(contributions_output))
# Check the structure of the output
expect_named(contributions_output, c("superpathway_score",
"celltype_contribution", "gene_contribution"))
# Check if superpathway_score is a matrix
expect_is(contributions_output$superpathway_score, "matrix")
# Check if superpathway_score is a matrix
expect_class(contributions_output$superpathway_score, "matrix")
expect_equal(ncol(contributions_output$superpathway_score), nrow(data))
# Check if celltype_contribution is a matrix
expect_is(contributions_output$celltype_contribution, "matrix")
# Check if celltype_contribution is a matrix
expect_class(contributions_output$celltype_contribution, "matrix")
expect_equal(nrow(contributions_output$celltype_contribution),
length(model_object@superpathway_input@superpathway_info@celltypes))
# Check if gene_contribution is a list of matrices
expect_type(contributions_output$gene_contribution, "list")
expect_true(all(sapply(contributions_output$gene_contribution, is.matrix)))
test_that("derive_contributions computes contributions correctly", {
data("example_superpathway_fit_model", package = "singIST")
model_object <- example_superpathway_fit_model
data <- biological_link_function(
example_mapping_organism,example_superpathway_fit_model,
exact = FALSE)$singIST_samples
# Call the function
contributions_output <- derive_contributions(model_object, data)
# Check if the output is a list
expect_true(is.list(contributions_output))
# Check the structure of the output
expect_named(contributions_output, c("superpathway_score",
"celltype_contribution", "gene_contribution"))
# Check if superpathway_score is a matrix
expect_class(contributions_output$superpathway_score, "matrix")
expect_equal(ncol(contributions_output$superpathway_score), nrow(data))
# Check if celltype_contribution is a matrix
expect_class(contributions_output$celltype_contribution, "matrix")
expect_equal(nrow(contributions_output$celltype_contribution),
length(model_object@superpathway_input@superpathway_info@celltypes))
# Check if gene_contribution is a list of matrices
expect_type(contributions_output$gene_contribution, "list")
expect_true(all(sapply(contributions_output$gene_contribution, is.matrix)))
})
test_that("derive_contributions handles edge cases", {
data("example_superpathway_fit_model", package = "singIST")
# Test with an empty data frame or NA values in the data
empty_data <- data.frame(matrix(ncol = 0, nrow = 0))
expect_error(derive_contributions(example_superpathway_fit_model,
empty_data))
# Test if NA values are handled gracefully
data_with_na <- biological_link_function(
example_mapping_organism, example_superpathway_fit_model,
exact = FALSE)$singIST_samples
data_with_na[1, 1] <- NA
expect_warning(derive_contributions(example_superpathway_fit_model,
data_with_na), "missing values")
})
data_with_na[1, 1] <- NA
test_that("derive_contributions handles edge cases", {
data("example_superpathway_fit_model", package = "singIST")
# Test with an empty data frame or NA values in the data
empty_data <- data.frame(matrix(ncol = 0, nrow = 0))
expect_error(derive_contributions(example_superpathway_fit_model,
empty_data))
})
load_all()
usethis::use_test("superpathway_recap")
usethis::use_test("celltype_recap")
usethis::use_test("gene_contrib")
usethis::use_test("singISTrecapitulations")
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
superpathway_recap(model, original$superpathway_score,
derived$superpathway_score)
# Mocking data_original and data_singIST matrices
data_original <- matrix(rnorm(10), nrow = 5, ncol = 2)
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
result <- superpathway_recap(model, original$superpathway_score,
derived$superpathway_score)
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("recapitulation" %in% colnames(result))
expect_true("p_val" %in% colnames(result))
colnames(result)
test_that("superpathway_recap works as expected", {
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
result <- superpathway_recap(model, original$superpathway_score,
derived$superpathway_score)
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("recapitulation" %in% colnames(result))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
result <- celltype_recap(model, original$superpathway_score,
derived$superpathway_score)
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
result <- celltype_recap(model, original$superpathway_score,
derived$superpathway_score)
result <- celltype_recap(model, original$celltype_contribution,
derived$celltype_contribution)
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("recapitulation" %in% colnames(result))
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("celltype" %in% colnames(result))
# Checking if the result is a data frame
expect_true(is.data.frame(result))
expect_true("celltype" %in% colnames(result))))
expect_true("reference" %in% colnames(result))
# Checking if the result is a data frame
expect_true(is.data.frame(result))
expect_true("celltype" %in% colnames(result))))
expect_true("celltype" %in% colnames(result))
expect_true("reference" %in% colnames(result))
expect_true("p_val" %in% colnames(result))
test_that("celltype_recap works as expected", {
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
result <- celltype_recap(model, original$celltype_contribution,
derived$celltype_contribution)
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("recapitulation" %in% colnames(result))
# Checking if the result is a data frame
expect_true(is.data.frame(result))
expect_true("celltype" %in% colnames(result))
expect_true("reference" %in% colnames(result))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
celltype <- celltype_recap(model, original$celltype_contribution,
derived$celltype_contribution)
# Running the function
result <- gene_contrib(model_object, original$gene_contribution,
derived$gene_contribution, celltype)
result
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("celltype" %in% colnames(result))
expect_true("gene" %in% colnames(result))
expect_true("contribution" %in% colnames(result))
test_that("gene_contrib works as expected", {
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
model <- example_superpathway_fit_model
mapped <- example_mapping_organism
singIST_samples <- biological_link_function(mapped, model,
exact = FALSE)$singIST_samples
original <- derive_contributions(model, singIST_samples)
derived <- derive_contributions(model,
slot(model, "model_fit")$predictor_block)
celltype <- celltype_recap(model, original$celltype_contribution,
derived$celltype_contribution)
# Running the function
result <- gene_contrib(model_object, original$gene_contribution,
derived$gene_contribution, celltype)
# Checking if the result is a data frame
expect_true(is.data.frame(result))
# Checking if the required columns are present
expect_true("pathway" %in% colnames(result))
expect_true("celltype" %in% colnames(result))
expect_true("gene" %in% colnames(result))
expect_true("contribution" %in% colnames(result))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
object <- example_mapping_organism
model_object <- example_superpathway_fit_model
result <- singISTrecapitulations(object, model_object)
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
object <- example_mapping_organism
model_object <- example_superpathway_fit_model
result <- singISTrecapitulations(object, model_object, exact = FALSE)
# Checking if the result is a list with correct components
expect_true(is.list(result))
expect_true("superpathway" %in% names(result))
expect_true("celltype" %in% names(result))
expect_true("gene" %in% names(result))
expect_true("FC" %in% names(result))
# Checking that the data frames have the expected columns
expect_true("pathway" %in% colnames(result$superpathway))
expect_true("recapitulation" %in% colnames(result$superpathway))
expect_true("p_val" %in% colnames(result$superpathway))
expect_true("pathway" %in% colnames(result$celltype))
expect_true("celltype" %in% colnames(result$celltype))
expect_true("p_val" %in% colnames(result$superpathway))
expect_true("celltype" %in% colnames(result$celltype))
expect_true("recapitulation" %in% colnames(result$celltype))
expect_true("orthology" %in% colnames(result$celltype))
expect_true("pathway" %in% colnames(result$gene))
expect_true("celltype" %in% colnames(result$gene))
expect_true("gene" %in% colnames(result$gene))
expect_true("contribution" %in% colnames(result$gene))
test_that("singISTrecapitulations works as expected", {
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
object <- example_mapping_organism
model_object <- example_superpathway_fit_model
result <- singISTrecapitulations(object, model_object, exact = FALSE)
# Checking if the result is a list with correct components
expect_true(is.list(result))
expect_true("superpathway" %in% names(result))
expect_true("celltype" %in% names(result))
expect_true("gene" %in% names(result))
expect_true("FC" %in% names(result))
# Checking that the data frames have the expected columns
expect_true("pathway" %in% colnames(result$superpathway))
expect_true("recapitulation" %in% colnames(result$superpathway))
expect_true("p_val" %in% colnames(result$superpathway))
expect_true("celltype" %in% colnames(result$celltype))
expect_true("recapitulation" %in% colnames(result$celltype))
expect_true("orthology" %in% colnames(result$celltype))
expect_true("pathway" %in% colnames(result$gene))
expect_true("celltype" %in% colnames(result$gene))
expect_true("gene" %in% colnames(result$gene))
expect_true("contribution" %in% colnames(result$gene))
})
load_all()
usethis::use_test("multiple_check")
usethis::use_test("multiple_fitOptimal")
usethis::use_test("multiple_singISTrecapitulations")
# Test when parameter is NULL
parameter <- NULL
objectLength <- 3
result <- multiple_check(parameter, objectLength)
expect_equal(length(result), objectLength)
expect_true(all(sapply(result, is.null)))
# Test when parameter is a single value
parameter <- "test"
objectLength <- 5
result <- multiple_check(parameter, objectLength)
expect_equal(length(result), objectLength)
expect_true(all(sapply(result, function(x) x == "test")))
# Test when parameter length matches object length
parameter <- c(1, 2, 3, 4, 5)
objectLength <- 5
result <- multiple_check(parameter, objectLength)
expect_equal(length(result), objectLength)
expect_equal(result, list(1, 2, 3, 4, 5))
# Test when parameter length does not match object length
parameter <- c(1, 2)
objectLength <- 5
expect_error(multiple_check(parameter, objectLength), "Parameters should either have length 1 or same length as number of objects.")
expect_error(multiple_check(parameter, objectLength),
"Parameters should either have length 1 or same length as
number of objects.")
multiple_check(parameter, objectLength)
expect_error(multiple_check(parameter, objectLength),
"Parameters should either have length 1 or same length as
number of objects.")
expect_error(multiple_check(parameter, objectLength), "Parameters should either have length 1 or same length as number of objects.")
expect_error(
multiple_check(parameter, objectLength),
"Parameters should either have length 1 or same length as number of objects.")
expect_error(multiple_check(parameter, objectLength))
test_that("Test multiple_check function", {
# Test when parameter is NULL
parameter <- NULL
objectLength <- 3
result <- multiple_check(parameter, objectLength)
expect_equal(length(result), objectLength)
expect_true(all(sapply(result, is.null)))
# Test when parameter is a single value
parameter <- "test"
objectLength <- 5
result <- multiple_check(parameter, objectLength)
expect_equal(length(result), objectLength)
expect_true(all(sapply(result, function(x) x == "test")))
# Test when parameter length matches object length
parameter <- c(1, 2, 3, 4, 5)
objectLength <- 5
result <- multiple_check(parameter, objectLength)
expect_equal(length(result), objectLength)
expect_equal(result, list(1, 2, 3, 4, 5))
# Test when parameter length does not match object length
parameter <- c(1, 2)
objectLength <- 5
expect_error(multiple_check(parameter, objectLength))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
data("example_superpathway_fit_model", package = "singIST")
# Define example superpathway.input objects
object1 <- example_superpathway_fit_model
object2 <- example_superpathway_fit_model
models <- list(object1, object2)
# Test when using default arguments
result <- multiple_fitOptimal(models)
data("example_superpathway_fit_model", package = "singIST")
# Define example superpathway.input objects
object1 <- example_superpathway_fit_model
object2 <- example_superpathway_fit_model
object1
# Test when using default arguments
result <- multiple_fitOptimal(models)
data("example_superpathway_input_model", package = "singIST")
data("example_superpathway_input", package = "singIST")
data("example_superpathway_input", package = "singIST")
# Define example superpathway.input objects
object1 <- example_superpathway_input
object2 <- example_superpathway_input
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result <- multiple_fitOptimal(models)
expect_equal(length(result), 2)
expect_true(all(sapply(result, inherits, "superpathway.fit.model")))
# Test when passing custom arguments
result <- multiple_fitOptimal(models, type = c("jackknife", "subsampling"))
expect_equal(length(result), 2)
# Test when passing different parameters for each model
result <- multiple_fitOptimal(models, nsubsampling = c(100, 50),
npermut = c(10, 15))
expect_equal(length(result), 2)
# Test invalid case when number of arguments doesn't match number of models
expect_error(multiple_fitOptimal(models, nsubsampling = c(100, 50, 25)))
test_that("Test multiple_fitOptimal function", {
data("example_superpathway_input", package = "singIST")
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result <- multiple_fitOptimal(models)
expect_equal(length(result), 2)
expect_true(all(sapply(result, inherits, "superpathway.fit.model")))
# Test when passing custom arguments
result <- multiple_fitOptimal(models, type = c("jackknife", "subsampling"))
expect_equal(length(result), 2)
# Test when passing different parameters for each model
result <- multiple_fitOptimal(models, nsubsampling = c(100, 50),
npermut = c(10, 15))
expect_equal(length(result), 2)
# Test invalid case when number of arguments doesn't match number of models
expect_error(multiple_fitOptimal(models, nsubsampling = c(100, 50, 25)))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result_models <- multiple_fitOptimal(models)
# Test when using default arguments for from_species
result <- multiple_singISTrecapitulations(object, result_models)
# Test when using default arguments for from_species
result <- multiple_singISTrecapitulations(object, result_models,
exact = FALSE)
expect_equal(names(result), c("superpathway", "celltype", "gene", "FC"))
expect_true(inherits(result$superpathway, "data.frame"))
expect_true(inherits(result$celltype, "data.frame"))
expect_true(inherits(result$gene, "data.frame"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(object, model_objects,
from_species = list("hsapiens", "mmusculus"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(object, result_models,
from_species = list("hsapiens", "mmusculus"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(
object, result_models, from_species = list("hsapiens", "mmusculus"),
exact = FALSE)
expect_equal(length(result$superpathway), 2)
length(result$superpathway)
result$superpathway
length(result$superpathway)
length(result$recapitulation)
result$recapitulation
expect_equal(length(result$superpathway$recapitulation), 2)
# Test when the number of from_species does not match the number of models
expect_error(multiple_singISTrecapitulations(
object, model_objects, exact = FALSE, from_species = list("hsapiens")))
test_that("Test multiple_singISTrecapitulations function", {
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result_models <- multiple_fitOptimal(models)
# Test when using default arguments for from_species
result <- multiple_singISTrecapitulations(object, result_models,
exact = FALSE)
expect_equal(names(result), c("superpathway", "celltype", "gene", "FC"))
expect_true(inherits(result$superpathway, "data.frame"))
expect_true(inherits(result$celltype, "data.frame"))
expect_true(inherits(result$gene, "data.frame"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(
object, result_models, from_species = list("hsapiens", "mmusculus"),
exact = FALSE)
expect_equal(length(result$superpathway$recapitulation), 2)
# Test when the number of from_species does not match the number of models
expect_error(multiple_singISTrecapitulations(
object, model_objects, exact = FALSE, from_species = list("hsapiens")))
})
load_all()
load_all()
check()
BiocCheck::BiocCheck()
