expect_error(multiple_check(parameter, objectLength))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
data("example_superpathway_fit_model", package = "singIST")
# Define example superpathway.input objects
object1 <- example_superpathway_fit_model
object2 <- example_superpathway_fit_model
models <- list(object1, object2)
# Test when using default arguments
result <- multiple_fitOptimal(models)
data("example_superpathway_fit_model", package = "singIST")
# Define example superpathway.input objects
object1 <- example_superpathway_fit_model
object2 <- example_superpathway_fit_model
object1
# Test when using default arguments
result <- multiple_fitOptimal(models)
data("example_superpathway_input_model", package = "singIST")
data("example_superpathway_input", package = "singIST")
data("example_superpathway_input", package = "singIST")
# Define example superpathway.input objects
object1 <- example_superpathway_input
object2 <- example_superpathway_input
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result <- multiple_fitOptimal(models)
expect_equal(length(result), 2)
expect_true(all(sapply(result, inherits, "superpathway.fit.model")))
# Test when passing custom arguments
result <- multiple_fitOptimal(models, type = c("jackknife", "subsampling"))
expect_equal(length(result), 2)
# Test when passing different parameters for each model
result <- multiple_fitOptimal(models, nsubsampling = c(100, 50),
npermut = c(10, 15))
expect_equal(length(result), 2)
# Test invalid case when number of arguments doesn't match number of models
expect_error(multiple_fitOptimal(models, nsubsampling = c(100, 50, 25)))
test_that("Test multiple_fitOptimal function", {
data("example_superpathway_input", package = "singIST")
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result <- multiple_fitOptimal(models)
expect_equal(length(result), 2)
expect_true(all(sapply(result, inherits, "superpathway.fit.model")))
# Test when passing custom arguments
result <- multiple_fitOptimal(models, type = c("jackknife", "subsampling"))
expect_equal(length(result), 2)
# Test when passing different parameters for each model
result <- multiple_fitOptimal(models, nsubsampling = c(100, 50),
npermut = c(10, 15))
expect_equal(length(result), 2)
# Test invalid case when number of arguments doesn't match number of models
expect_error(multiple_fitOptimal(models, nsubsampling = c(100, 50, 25)))
})
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result_models <- multiple_fitOptimal(models)
# Test when using default arguments for from_species
result <- multiple_singISTrecapitulations(object, result_models)
# Test when using default arguments for from_species
result <- multiple_singISTrecapitulations(object, result_models,
exact = FALSE)
expect_equal(names(result), c("superpathway", "celltype", "gene", "FC"))
expect_true(inherits(result$superpathway, "data.frame"))
expect_true(inherits(result$celltype, "data.frame"))
expect_true(inherits(result$gene, "data.frame"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(object, model_objects,
from_species = list("hsapiens", "mmusculus"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(object, result_models,
from_species = list("hsapiens", "mmusculus"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(
object, result_models, from_species = list("hsapiens", "mmusculus"),
exact = FALSE)
expect_equal(length(result$superpathway), 2)
length(result$superpathway)
result$superpathway
length(result$superpathway)
length(result$recapitulation)
result$recapitulation
expect_equal(length(result$superpathway$recapitulation), 2)
# Test when the number of from_species does not match the number of models
expect_error(multiple_singISTrecapitulations(
object, model_objects, exact = FALSE, from_species = list("hsapiens")))
test_that("Test multiple_singISTrecapitulations function", {
data("example_superpathway_fit_model", package = "singIST")
data("example_mapping_organism", package = "singIST")
# Define example superpathway.input objects
object1 <- object2 <- example_superpathway_input
models <- list(object1, object2)
# Test when using default arguments
result_models <- multiple_fitOptimal(models)
# Test when using default arguments for from_species
result <- multiple_singISTrecapitulations(object, result_models,
exact = FALSE)
expect_equal(names(result), c("superpathway", "celltype", "gene", "FC"))
expect_true(inherits(result$superpathway, "data.frame"))
expect_true(inherits(result$celltype, "data.frame"))
expect_true(inherits(result$gene, "data.frame"))
# Test with custom from_species
result <- multiple_singISTrecapitulations(
object, result_models, from_species = list("hsapiens", "mmusculus"),
exact = FALSE)
expect_equal(length(result$superpathway$recapitulation), 2)
# Test when the number of from_species does not match the number of models
expect_error(multiple_singISTrecapitulations(
object, model_objects, exact = FALSE, from_species = list("hsapiens")))
})
load_all()
load_all()
check()
BiocCheck::BiocCheck()
asmbPLSDA.cv.loo <- function(X.matrix,
Y.matrix,
PLS_term = 1,
X.dim,
quantile.comb.table,
outcome.type = c("binary", "multiclass"),
Method = NULL,
measure = "B_accuracy",
parallel = FALSE,
cores = NULL,
expected.measure.increase = 0.005,
center = TRUE,
scale = TRUE,
maxiter = 100){
# Libraries
library(asmbPLS)
if(parallel){
library(parallel)
library(furrr)
}
n_group = ncol(Y.matrix)
quantile_table_CV <- matrix(data = rep(0, PLS_term), nrow = PLS_term,
ncol = (length(X.dim) + 5)) # Table to save the best quantile combination and the corresponding measures
#if (outcome.type == "multiclass") {
#  for (int n = 0; n < ncv; ++n) {
#   CV_index_results[n] = CV_index_multiclass(F_matrix, K);
#  }
#}
if(measure == "accuracy") {
measure_selected = 1
}
if(measure == "B_accuracy") {
measure_selected = 2
}
if(measure == "precision") {
measure_selected = 3
}
if(measure == "recall") {
measure_selected = 4
}
if(measure == "F1") {
measure_selected = 5
}
# Number of LOO samples
K = nrow(Y.matrix)
# Number of quantile combinations
n_quantile_comb = nrow(quantile.comb.table)
for (i in 1:PLS_term) {
results_CV_summary_n = matrix(data = rep(0, n_quantile_comb), nrow = n_quantile_comb,
ncol = K, byrow = TRUE)
F_matrix_validation_bind = matrix(data = rep(0, n_quantile_comb), nrow = n_quantile_comb,
ncol = K, byrow = TRUE)
if(parallel){
if(is.null(cores)){
workers <- detectCores(logical=FALSE)-1
# Start cluster
plan(multisession, workers = workers)
# Object to execute parallel on
j <- data.frame("j" = 1:K)
output <- furrr::future_pmap(j, quantile_computation, results_CV_summary_n = results_CV_summary_n,
F_matrix_validation_bind = F_matrix_validation_bind, X.matrix = X.matrix,
Y.matrix = Y.matrix, PLS_term = i, X.dim = X.dim,
quantile.comb.table = quantile.comb.table, outcome.type = outcome.type,
quantile_table_CV = quantile_table_CV, K = K, n_quantile_comb = n_quantile_comb,
Method = Method, measure = measure, expected.measure.increase = expected.measure.increase,
center = center, scale = center, maxiter = maxiter, .progress = TRUE,
.options = furrr_options(globals = FALSE, seed = TRUE))
# Joint results from the lists
results_CV_summary_n <- output[[1]]$results_CV_summary_n
F_matrix_validation_bind <- output[[1]]$F_matrix_validation_bind
for(ncol in 2:K){
results_CV_summary_n[,ncol] <- output[[ncol]]$results_CV_summary_n[,ncol]
F_matrix_validation_bind[,ncol] <- output[[ncol]]$F_matrix_validation_bind[,ncol]
}
# Stop the cluster
plan(sequential)
}else{
workers <- cores
# Start cluster
plan(multisession, workers = workers)
# Object to execute parallel on
j <- data.frame("j" = 1:K)
output <- furrr::future_pmap(j, quantile_computation, results_CV_summary_n = results_CV_summary_n,
F_matrix_validation_bind = F_matrix_validation_bind, X.matrix = X.matrix,
Y.matrix = Y.matrix, PLS_term = i, X.dim = X.dim,
quantile.comb.table = quantile.comb.table, outcome.type = outcome.type,
quantile_table_CV = quantile_table_CV, K = K, n_quantile_comb = n_quantile_comb,
Method = Method, measure = measure, expected.measure.increase = expected.measure.increase,
center = center, scale = center, maxiter = maxiter, .progress = TRUE,
.options = furrr_options(globals = FALSE, seed = TRUE))
# Joint results from the lists
results_CV_summary_n <- output[[1]]$results_CV_summary_n
F_matrix_validation_bind <- output[[1]]$F_matrix_validation_bind
for(ncol in 2:K){
results_CV_summary_n[,ncol] <- output[[ncol]]$results_CV_summary_n[,ncol]
F_matrix_validation_bind[,ncol] <- output[[ncol]]$F_matrix_validation_bind[,ncol]
}
# Stop the cluster
plan(sequential)
}
}else{
for(j in 1:K) {
validation_index = j
aux = 1:K
training_index =  aux[aux != j]
temp = 0
# obtain validation and training sets
E_matrix_validation = as.matrix(t(X.matrix[validation_index,]))
F_matrix_validation = as.matrix(t(Y.matrix[validation_index,]))
E_matrix_training = as.matrix(X.matrix[training_index,])
F_matrix_training = as.matrix(Y.matrix[training_index,])
# calculate overall/balanced accuracy using different quantile combinations
for (l in 1:n_quantile_comb) {
quantile_table_CV[i, 1:length(X.dim)] = quantile.comb.table[l, 1:length(X.dim)]
if(i == 1){
quantile_temp = t(as.matrix(quantile_table_CV[1:i, 1:length(X.dim)]))
}else{
quantile_temp = as.matrix(quantile_table_CV[1:i, 1:length(X.dim)])
}
# fit model using training set
asmbPLSDA_fit_results = asmbPLSDA.fit(E_matrix_training, F_matrix_training, i, X.dim, quantile_temp, outcome.type, center, scale, maxiter)
asmbPLSDA_predict_results = asmbPLSDA.predict(asmbPLSDA_fit_results, E_matrix_validation, i, Method)
Y_pred = as.numeric(asmbPLSDA_predict_results["Y_pred"])
results_CV_summary_n[l, j] = Y_pred
F_matrix_validation_bind[l, j] = F_matrix_validation
}
}
}
# calculate the mean accuracy for each quantile combination
measure_acc = c()
for(l in 1:n_quantile_comb){
Y_pred_ = as.vector(results_CV_summary_n[l,])
F_matrix_validation_ = as.vector(F_matrix_validation_bind[l,])
measure_new = Results_comparison_measure(Y_pred_, F_matrix_validation_, outcome.type)
measure_acc = c(measure_acc, measure_new[measure_selected])
}
# find the quantile combination with the highest accuracy
index_max_measure = which.max(measure_acc)
quantile_table_CV[i, 1:length(X.dim)] = quantile.comb.table[index_max_measure,]
Y_pred_bind = matrix()
F_matrix_validation_bind = matrix()
# obtain corresponding measures for the selected quantile combination
for (j in 1:K) {
validation_index = j
aux = 1:K
training_index =  aux[aux != j]
temp = 0
# obtain validation and training sets
E_matrix_validation = as.matrix(t(X.matrix[validation_index,]))
F_matrix_validation = as.matrix(t(Y.matrix[validation_index,]))
E_matrix_training = as.matrix(X.matrix[training_index,])
F_matrix_training = as.matrix(Y.matrix[training_index,])
if(i == 1){
quantile_temp = t(as.matrix(quantile_table_CV[1:i, 1:length(X.dim)]))
}else{
quantile_temp = as.matrix(quantile_table_CV[1:i, 1:length(X.dim)])
}
# fit model using training set
asmbPLSDA_fit_results = asmbPLSDA.fit(E_matrix_training, F_matrix_training, i, X.dim, quantile_temp, outcome.type, center, scale, maxiter)
asmbPLSDA_predict_results = asmbPLSDA.predict(asmbPLSDA_fit_results, E_matrix_validation, i, Method)
Y_pred = as.matrix(asmbPLSDA_predict_results["Y_pred"])
rownames(Y_pred) = NULL
Y_pred_bind = rbind(Y_pred_bind, Y_pred)
F_matrix_validation_bind = rbind(F_matrix_validation_bind, F_matrix_validation)
}
measure = Results_comparison_measure(Y_pred_bind, F_matrix_validation_bind, outcome.type)
quantile_table_CV[i, (length(X.dim)+1):ncol(quantile_table_CV)] = measure
#Results_comparison_measure(Y_pred, F_matrix_validation, outcome.type)
}
optimal_nPLS = 1
if(PLS_term > 1) {
for (i in 1:(PLS_term-1)) {
current_measure =  quantile_table_CV[i, (length(X.dim) + measure_selected)]
next_measure =  quantile_table_CV[i+1, (length(X.dim) + measure_selected)]
if(next_measure > current_measure + expected.measure.increase) {
optimal_nPLS = optimal_nPLS + 1
} else {break}
}
}
output = list("quantile_table_CV"= quantile_table_CV,
"optimal_nPLS" = optimal_nPLS)
return(output)
}
# Load list with lognorm counts, gene set and pathway name
all_input <- list.files("~/singIST-reproducibility/1_rawdata/exported_results/", pattern = "\\.RData$")
all_input
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", 8))
# Load list with lognorm counts, gene set and pathway name
all_input <- list.files("~/singIST-reproducibility/1_rawdata/exported_results/", pattern = "\\.RData$")
all_input
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[8]))
output_dataset
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[1]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[2]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[3]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[4]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[5]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[6]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[7]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[8]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[9]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[10]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[11]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[12]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[13]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[14]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[15]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[16]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[17]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[18]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[19]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[20]))
output_dataset$Pathway_name
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[21]))
output_dataset$Pathway_name
output_dataset$Lognorm_counts <- as.data.frame(output_dataset$Lognorm_counts)
pathway <- output_dataset
# Split rownames into sample id and cell type
split <- do.call(rbind, strsplit(rownames(pathway$Lognorm_counts), "_"))
pathway$Lognorm_counts$CELLTYPE_new <- split[,1]
pathway$Lognorm_counts$Sample_id <- split[,2]
# Filter only cell types to analyze
pathway$Lognorm_counts <- pathway$Lognorm_counts[pathway$Lognorm_counts$CELLTYPE_new %in% c("T-cell", "Keratinocytes",
"Dendritic Cells", "Langerhans Cells",
"Melanocytes"),]
# Create X.matrix block
df_X.matrix <- data.frame("Sample_id" = unique(pathway$Lognorm_count$Sample_id))
aux_X.matrix <- pathway$Lognorm_counts
cell_type_new <- unique(pathway$Lognorm_counts$CELLTYPE_new)
for(i in cell_type_new){
blockcells <- aux_X.matrix[aux_X.matrix$CELLTYPE_new == i, ]
colnames(blockcells)[1:(which(colnames(aux_X.matrix) == "CELLTYPE_new")-1)] <- paste0(i, "*", colnames(blockcells)[1:(which(colnames(aux_X.matrix) == "CELLTYPE_new")-1)])
df_X.matrix <- merge(df_X.matrix, blockcells[, colnames(blockcells) != "CELLTYPE_new"],
by = "Sample_id")
}
# Train asmbPLS-DA
## Load parameters to train asmbPLS-DA
pathway$Y.matrix <- as.matrix(ifelse(grepl("HC", df_X.matrix$Sample_id, fixed = TRUE), 0, 1))
pathway$X.matrix <- as.matrix(df_X.matrix[, colnames(df_X.matrix) != "Sample_id"])
pathway$X.dim <- colSums(sapply(cell_type_new, function(cell_type){ grepl(cell_type, colnames(df_X.matrix))}))
pathway$quantile.comb.table.cv <- as.matrix(permuteGeneral(seq(0.05, 0.95, by = 0.10),
m = length(cell_type_new),
TRUE))
library(RcppAlgos)
pathway$quantile.comb.table.cv <- as.matrix(permuteGeneral(seq(0.05, 0.95, by = 0.10),
m = length(cell_type_new),
TRUE))
nrow(pathway$quantile.comb.table.cv)
length(cell_type_new)
pathway$quantile.comb.table.cv
colnames(pathway$quantile.comb.table.cv) <- paste0("block_", rep(1:length(cell_type_new),1))
pathway
pathway$quantile.comb.table.cv
# Set binary outcome
pathway$outcome.type <- "binary"
# LOOCV
pathway$asmbPLSDA.cv <- asmbPLSDA.cv.loo(X.matrix = pathway$X.matrix,
Y.matrix = pathway$Y.matrix,
PLS_term = 3,
X.dim = pathway$X.dim,
quantile.comb.table = pathway$quantile.comb.table.cv,
outcome.type = pathway$outcome.type,
center = TRUE,
scale = TRUE,
measure = "F1",
parallel = TRUE,
cores = NULL)
# Function to parallelize model fit for each quantile
quantile_computation <-
function(j, ..., results_CV_summary_n, F_matrix_validation_bind,
X.matrix, Y.matrix, PLS_term = 1, X.dim,
quantile.comb.table, outcome.type = c("binary", "multiclass"), quantile_table_CV, K, n_quantile_comb,
Method = NULL, measure = "B_accuracy", expected.measure.increase = 0.005,
center = TRUE, scale = TRUE, maxiter = 100){
suppressWarnings(library(asmbPLS))
validation_index = j
aux = 1:K
training_index =  aux[aux != j]
temp = 0
# obtain validation and training sets
E_matrix_validation = as.matrix(t(X.matrix[validation_index,]))
F_matrix_validation = as.matrix(t(Y.matrix[validation_index,]))
E_matrix_training = as.matrix(X.matrix[training_index,])
F_matrix_training = as.matrix(Y.matrix[training_index,])
# calculate overall/balanced accuracy using different quantile combinations
for (l in 1:n_quantile_comb) {
quantile_table_CV[PLS_term, 1:length(X.dim)] <- quantile.comb.table[l, 1:length(X.dim)]
if(PLS_term == 1){
quantile_temp = t(as.matrix(quantile_table_CV[1:PLS_term, 1:length(X.dim)]))
}else{
quantile_temp = as.matrix(quantile_table_CV[1:PLS_term, 1:length(X.dim)])
}
# fit model using training set
asmbPLSDA_fit_results = asmbPLSDA.fit(E_matrix_training, F_matrix_training, PLS_term, X.dim, quantile_temp, outcome.type, center, scale, maxiter)
asmbPLSDA_predict_results = asmbPLSDA.predict(asmbPLSDA_fit_results, E_matrix_validation, PLS_term, Method)
Y_pred = as.numeric(asmbPLSDA_predict_results["Y_pred"])
results_CV_summary_n[l, j] <- Y_pred
F_matrix_validation_bind[l, j] <- F_matrix_validation
}
return(list("results_CV_summary_n" = results_CV_summary_n,
"F_matrix_validation_bind" = F_matrix_validation_bind,
"obs" = j)
)
}
# LOOCV
pathway$asmbPLSDA.cv <- asmbPLSDA.cv.loo(X.matrix = pathway$X.matrix,
Y.matrix = pathway$Y.matrix,
PLS_term = 3,
X.dim = pathway$X.dim,
quantile.comb.table = pathway$quantile.comb.table.cv,
outcome.type = pathway$outcome.type,
center = TRUE,
scale = TRUE,
measure = "F1",
parallel = TRUE,
cores = NULL)
unique(pathway$Lognorm_counts$CELLTYPE_new)
# Load list with lognorm counts, gene set and pathway name
all_input <- list.files("~/singIST-reproducibility/1_rawdata/exported_results/", pattern = "\\.RData$")
load(paste0("~/singIST-reproducibility/1_rawdata/exported_results", "/", all_input[21]))
output_dataset$Pathway_name
output_dataset$Lognorm_counts <- as.data.frame(output_dataset$Lognorm_counts)
pathway <- output_dataset
# Split rownames into sample id and cell type
split <- do.call(rbind, strsplit(rownames(pathway$Lognorm_counts), "_"))
pathway$Lognorm_counts$CELLTYPE_new <- split[,1]
pathway$Lognorm_counts$Sample_id <- split[,2]
# Filter only cell types to analyze
pathway$Lognorm_counts <- pathway$Lognorm_counts[pathway$Lognorm_counts$CELLTYPE_new %in% c("T-cell", "Keratinocytes",
"Dendritic Cells", "Langerhan Cells",
"Melanocytes"),]
# Create X.matrix block
df_X.matrix <- data.frame("Sample_id" = unique(pathway$Lognorm_count$Sample_id))
aux_X.matrix <- pathway$Lognorm_counts
cell_type_new <- unique(pathway$Lognorm_counts$CELLTYPE_new)
cell_type_new
for(i in cell_type_new){
blockcells <- aux_X.matrix[aux_X.matrix$CELLTYPE_new == i, ]
colnames(blockcells)[1:(which(colnames(aux_X.matrix) == "CELLTYPE_new")-1)] <- paste0(i, "*", colnames(blockcells)[1:(which(colnames(aux_X.matrix) == "CELLTYPE_new")-1)])
df_X.matrix <- merge(df_X.matrix, blockcells[, colnames(blockcells) != "CELLTYPE_new"],
by = "Sample_id")
}
# Train asmbPLS-DA
## Load parameters to train asmbPLS-DA
pathway$Y.matrix <- as.matrix(ifelse(grepl("HC", df_X.matrix$Sample_id, fixed = TRUE), 0, 1))
pathway$X.matrix <- as.matrix(df_X.matrix[, colnames(df_X.matrix) != "Sample_id"])
pathway$X.dim <- colSums(sapply(cell_type_new, function(cell_type){ grepl(cell_type, colnames(df_X.matrix))}))
pathway$quantile.comb.table.cv <- as.matrix(permuteGeneral(seq(0.05, 0.95, by = 0.10),
m = length(cell_type_new),
TRUE))
nrow(pathway$quantile.comb.table.cv)
length(cell_type_new)
cell_type_new
environment(permuteGeneral)
??permuteGeneral
?permuteGeneral
?RcppAlgos::permuteGeneral
?RcppAlgos::permuteGeneral
??RcppAlgos::permuteGeneral
?RcppAlgos::permuteGeneral
as.matrix(permuteGeneral(seq(0.05, 0.95, by = 0.10),
m = length(cell_type_new),
replace ? TRUE))
as.matrix(permuteGeneral(seq(0.05, 0.95, by = 0.10),
m = length(cell_type_new),
replace = TRUE))
1 + 1
#| echo: false
2 * 2
